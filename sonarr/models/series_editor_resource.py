# coding: utf-8

"""
    Sonarr

    Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.

    The version of the OpenAPI document: v4.0.15.2941
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sonarr.models.apply_tags import ApplyTags
from sonarr.models.new_item_monitor_types import NewItemMonitorTypes
from sonarr.models.series_types import SeriesTypes
from typing import Optional, Set
from typing_extensions import Self

class SeriesEditorResource(BaseModel):
    """
    SeriesEditorResource
    """ # noqa: E501
    series_ids: Optional[List[StrictInt]] = Field(default=None, alias="seriesIds")
    monitored: Optional[StrictBool] = None
    monitor_new_items: Optional[NewItemMonitorTypes] = Field(default=None, alias="monitorNewItems")
    quality_profile_id: Optional[StrictInt] = Field(default=None, alias="qualityProfileId")
    series_type: Optional[SeriesTypes] = Field(default=None, alias="seriesType")
    season_folder: Optional[StrictBool] = Field(default=None, alias="seasonFolder")
    root_folder_path: Optional[StrictStr] = Field(default=None, alias="rootFolderPath")
    tags: Optional[List[StrictInt]] = None
    apply_tags: Optional[ApplyTags] = Field(default=None, alias="applyTags")
    move_files: Optional[StrictBool] = Field(default=None, alias="moveFiles")
    delete_files: Optional[StrictBool] = Field(default=None, alias="deleteFiles")
    add_import_list_exclusion: Optional[StrictBool] = Field(default=None, alias="addImportListExclusion")
    __properties: ClassVar[List[str]] = ["seriesIds", "monitored", "monitorNewItems", "qualityProfileId", "seriesType", "seasonFolder", "rootFolderPath", "tags", "applyTags", "moveFiles", "deleteFiles", "addImportListExclusion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeriesEditorResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if series_ids (nullable) is None
        # and model_fields_set contains the field
        if self.series_ids is None and "series_ids" in self.model_fields_set:
            _dict['seriesIds'] = None

        # set to None if monitored (nullable) is None
        # and model_fields_set contains the field
        if self.monitored is None and "monitored" in self.model_fields_set:
            _dict['monitored'] = None

        # set to None if quality_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.quality_profile_id is None and "quality_profile_id" in self.model_fields_set:
            _dict['qualityProfileId'] = None

        # set to None if season_folder (nullable) is None
        # and model_fields_set contains the field
        if self.season_folder is None and "season_folder" in self.model_fields_set:
            _dict['seasonFolder'] = None

        # set to None if root_folder_path (nullable) is None
        # and model_fields_set contains the field
        if self.root_folder_path is None and "root_folder_path" in self.model_fields_set:
            _dict['rootFolderPath'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeriesEditorResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "seriesIds": obj.get("seriesIds"),
            "monitored": obj.get("monitored"),
            "monitorNewItems": obj.get("monitorNewItems"),
            "qualityProfileId": obj.get("qualityProfileId"),
            "seriesType": obj.get("seriesType"),
            "seasonFolder": obj.get("seasonFolder"),
            "rootFolderPath": obj.get("rootFolderPath"),
            "tags": obj.get("tags"),
            "applyTags": obj.get("applyTags"),
            "moveFiles": obj.get("moveFiles"),
            "deleteFiles": obj.get("deleteFiles"),
            "addImportListExclusion": obj.get("addImportListExclusion")
        })
        return _obj


