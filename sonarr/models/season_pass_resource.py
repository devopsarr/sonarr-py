# coding: utf-8

"""
    Sonarr

    Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.

    The version of the OpenAPI document: v4.0.15.2941
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from sonarr.models.monitoring_options import MonitoringOptions
from sonarr.models.season_pass_series_resource import SeasonPassSeriesResource
from typing import Optional, Set
from typing_extensions import Self

class SeasonPassResource(BaseModel):
    """
    SeasonPassResource
    """ # noqa: E501
    series: Optional[List[SeasonPassSeriesResource]] = None
    monitoring_options: Optional[MonitoringOptions] = Field(default=None, alias="monitoringOptions")
    __properties: ClassVar[List[str]] = ["series", "monitoringOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonPassResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in series (list)
        _items = []
        if self.series:
            for _item_series in self.series:
                if _item_series:
                    _items.append(_item_series.to_dict())
            _dict['series'] = _items
        # override the default output from pydantic by calling `to_dict()` of monitoring_options
        if self.monitoring_options:
            _dict['monitoringOptions'] = self.monitoring_options.to_dict()
        # set to None if series (nullable) is None
        # and model_fields_set contains the field
        if self.series is None and "series" in self.model_fields_set:
            _dict['series'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonPassResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "series": [SeasonPassSeriesResource.from_dict(_item) for _item in obj["series"]] if obj.get("series") is not None else None,
            "monitoringOptions": MonitoringOptions.from_dict(obj["monitoringOptions"]) if obj.get("monitoringOptions") is not None else None
        })
        return _obj


