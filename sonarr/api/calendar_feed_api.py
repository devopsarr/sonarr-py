# coding: utf-8

"""
    Sonarr

    Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.

    The version of the OpenAPI document: v4.0.15.2941
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictInt, StrictStr
from typing import Optional

from sonarr.api_client import ApiClient, RequestSerialized
from sonarr.api_response import ApiResponse
from sonarr.rest import RESTResponseType


class CalendarFeedApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_feed_v3_calendar_sonarr_ics(
        self,
        past_days: Optional[StrictInt] = None,
        future_days: Optional[StrictInt] = None,
        tags: Optional[StrictStr] = None,
        unmonitored: Optional[StrictBool] = None,
        premieres_only: Optional[StrictBool] = None,
        as_all_day: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_feed_v3_calendar_sonarr_ics


        :param past_days:
        :type past_days: int
        :param future_days:
        :type future_days: int
        :param tags:
        :type tags: str
        :param unmonitored:
        :type unmonitored: bool
        :param premieres_only:
        :type premieres_only: bool
        :param as_all_day:
        :type as_all_day: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_feed_v3_calendar_sonarr_ics_serialize(
            past_days=past_days,
            future_days=future_days,
            tags=tags,
            unmonitored=unmonitored,
            premieres_only=premieres_only,
            as_all_day=as_all_day,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '2XX': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_feed_v3_calendar_sonarr_ics_with_http_info(
        self,
        past_days: Optional[StrictInt] = None,
        future_days: Optional[StrictInt] = None,
        tags: Optional[StrictStr] = None,
        unmonitored: Optional[StrictBool] = None,
        premieres_only: Optional[StrictBool] = None,
        as_all_day: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_feed_v3_calendar_sonarr_ics


        :param past_days:
        :type past_days: int
        :param future_days:
        :type future_days: int
        :param tags:
        :type tags: str
        :param unmonitored:
        :type unmonitored: bool
        :param premieres_only:
        :type premieres_only: bool
        :param as_all_day:
        :type as_all_day: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_feed_v3_calendar_sonarr_ics_serialize(
            past_days=past_days,
            future_days=future_days,
            tags=tags,
            unmonitored=unmonitored,
            premieres_only=premieres_only,
            as_all_day=as_all_day,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '2XX': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_feed_v3_calendar_sonarr_ics_without_preload_content(
        self,
        past_days: Optional[StrictInt] = None,
        future_days: Optional[StrictInt] = None,
        tags: Optional[StrictStr] = None,
        unmonitored: Optional[StrictBool] = None,
        premieres_only: Optional[StrictBool] = None,
        as_all_day: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_feed_v3_calendar_sonarr_ics


        :param past_days:
        :type past_days: int
        :param future_days:
        :type future_days: int
        :param tags:
        :type tags: str
        :param unmonitored:
        :type unmonitored: bool
        :param premieres_only:
        :type premieres_only: bool
        :param as_all_day:
        :type as_all_day: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_feed_v3_calendar_sonarr_ics_serialize(
            past_days=past_days,
            future_days=future_days,
            tags=tags,
            unmonitored=unmonitored,
            premieres_only=premieres_only,
            as_all_day=as_all_day,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '2XX': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_feed_v3_calendar_sonarr_ics_serialize(
        self,
        past_days,
        future_days,
        tags,
        unmonitored,
        premieres_only,
        as_all_day,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if past_days is not None:
            
            _query_params.append(('pastDays', past_days))
            
        if future_days is not None:
            
            _query_params.append(('futureDays', future_days))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if unmonitored is not None:
            
            _query_params.append(('unmonitored', unmonitored))
            
        if premieres_only is not None:
            
            _query_params.append(('premieresOnly', premieres_only))
            
        if as_all_day is not None:
            
            _query_params.append(('asAllDay', as_all_day))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey', 
            'X-Api-Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/feed/v3/calendar/sonarr.ics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


